worker_processes 1;
 
events { worker_connections 1024; }

http {
 
    sendfile on;

	# generated 2021-12-23, Mozilla Guideline v5.6, nginx 1.21.4, OpenSSL 1.1.1k, intermediate configuration
	# https://ssl-config.mozilla.org/#server=nginx&version=1.21.4&config=intermediate&openssl=1.1.1k&guideline=5.6
	server {
		listen 80 default_server;
		listen [::]:80 default_server;

		location / {
			return 301 https://$host$request_uri;
		}
	}

	server {
		listen 443 ssl http2;
		listen [::]:443 ssl http2;

		ssl_certificate /etc/nginx/ssl/cert.crt;
		ssl_certificate_key /etc/nginx/ssl/cert.key;
		ssl_session_timeout 1d;
		ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
		ssl_session_tickets off;

		# curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
		ssl_dhparam /etc/nginx/ssl/dhparam.pem;

		# intermediate configuration
		ssl_protocols TLSv1.2 TLSv1.3;
		ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
		ssl_prefer_server_ciphers off;

		# HSTS (ngx_http_headers_module is required) (63072000 seconds)
		add_header Strict-Transport-Security "max-age=63072000" always;

		# # OCSP stapling
		# ssl_stapling on;
		# ssl_stapling_verify on;

		# # verify chain of trust of OCSP response using Root CA and Intermediate certs
		# ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

		# replace with the IP address of your resolver
		resolver 127.0.0.1;

		
	
		location / {
			proxy_pass http://angular-app:4200/;

			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;

			proxy_http_version 1.1;
			proxy_cache_bypass $http_upgrade;
		}

		location /auth/ {
			proxy_pass https://keycloak:8443/auth/;

			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;

			proxy_http_version 1.1;
			proxy_cache_bypass $http_upgrade;
		}

		location /api/ {
			proxy_pass http://express-server:3000/api/;

			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;

			proxy_http_version 1.1;
			proxy_cache_bypass $http_upgrade;
		}

		location /kibana/ {
			proxy_pass http://kibana:5601/;

			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;

			proxy_http_version 1.1;
			proxy_cache_bypass $http_upgrade;
		}
	}
}
